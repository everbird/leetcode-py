#!/usr/bin/env python
# encoding: utf-8


class Solution:
    # @param {character[][]} board
    # @return {void} Do not return anything, modify board in-place instead.
    def solveSudoku(self, board):
        while not is_done(board):
            for y in range(9):
                for x in range(9):
                    if board[y][x] == '.':
                        r = try2fill(x, y, board)
                        print x, y, r, board
                        if r:
                            li = board[y]
                            s = str_replace(li, x, r)
                            board[y] = s


def str_replace(s, n, c):
    return s[:n] + [c] + s[n+1:]


def is_done(board):
    return not any(['.' in li for li in board])

D = {
    1: (2, 3),
    2: (1, 3),
    3: (1, 2),
    4: (5, 6),
    5: (4, 6),
    6: (4, 5),
    7: (8, 9),
    8: (7, 9),
    9: (7, 8),
}

def try2fill(x, y, board):
    nums = map(str, range(1, 10))
    li = board[y]

    col = [i[x] for i in board]

    _x = x // 3
    _y = y // 3
    squar = []
    for i in range(3):
        for j in range(3):
            squar.append(board[_y*3 + j][_x*3 + i])

    if '.' not in li and '.' not in col and '.' not in squar:
        return

    for a in li:
        if a in nums:
            nums.remove(a)

    for a in col:
        if a in nums:
            nums.remove(a)

    for a in squar:
        if a in nums:
            nums.remove(a)

    if len(nums) == 1:
        return nums[0]

    for n in nums:
        r1, r2 = D[y+1]
        c1, c2 = D[x+1]
        if (n in board[r1-1]
                and n in board[r2-1]
                and n in get_col(c1-1, board)
                and n in get_col(c2-1, board)):
            board[y][x] = n


def get_col(y, board):
    return [x[y] for x in board]



if __name__ == '__main__':
    a = [
        [".", ".", "9", "7", "4", "8", ".", ".", "."],
        ["7", ".", ".", ".", ".", ".", ".", ".", "."],
        [".", "2", ".", "1", ".", "9", ".", ".", "."],
        [".", ".", "7", ".", ".", ".", "2", "4", "."],
        [".", "6", "4", ".", "1", ".", "5", "9", "."],
        [".", "9", "8", ".", ".", ".", "3", ".", "."],
        [".", ".", ".", "8", ".", "3", ".", "2", "."],
        [".", ".", ".", ".", ".", ".", ".", ".", "6"],
        [".", ".", ".", "2", "7", "5", "9", ".", "."]
    ]
    #a = [
        #['5', '3', '.', '.', '7', '.', '.', '.', '.'],
        #['6', '.', '.', '1', '9', '5', '.', '.', '.'],
        #['.', '9', '8', '.', '.', '.', '.', '6', '.'],
        #['8', '.', '.', '.', '6', '.', '.', '.', '3'],
        #['4', '.', '.', '8', '.', '3', '.', '.', '1'],
        #['7', '.', '.', '.', '2', '.', '.', '.', '6'],
        #['.', '6', '.', '.', '.', '.', '2', '8', '.'],
        #['.', '.', '.', '4', '1', '9', '.', '.', '5'],
        #['.', '.', '.', '.', '8', '.', '.', '7', '9']
    #]
    a = [
        ['.', '.', '9', '7', '4', '8', '.', '.', '.'],
        ['7', '.', '.', '6', '.', '2', '.', '.', '.'],
        ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
        ['.', '.', '7', '9', '8', '6', '2', '4', '1'],
        ['2', '6', '4', '3', '1', '7', '5', '9', '8'],
        ['1', '9', '8', '5', '2', '4', '3', '6', '7'],
        ['.', '.', '.', '8', '6', '3', '.', '2', '.'],
        ['.', '.', '.', '4', '9', '1', '.', '.', '6'],
        ['.', '.', '.', '2', '7', '5', '9', '.', '.']
    ]
    a = [
        ['.', '.', '9', '7', '4', '8', '.', '.', '2'],
        ['7', '.', '.', '6', '.', '2', '.', '.', '9'],
        ['.', '2', '.', '1', '.', '9', '.', '.', '.'],
        ['.', '.', '7', '9', '8', '6', '2', '4', '1'],
        ['2', '6', '4', '3', '1', '7', '5', '9', '8'],
        ['1', '9', '8', '5', '2', '4', '3', '6', '7'],
        ['9', '.', '.', '8', '6', '3', '.', '2', '.'],
        ['.', '.', '2', '4', '9', '1', '.', '.', '6'],
        ['.', '.', '.', '2', '7', '5', '9', '.', '.']
    ]
    s = Solution()
    s.solveSudoku(a)
    print a
